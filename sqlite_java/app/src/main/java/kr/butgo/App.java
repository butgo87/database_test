/*
 * This source file was generated by the Gradle 'init' task
 */
package kr.butgo;

import io.github.cdimascio.dotenv.Dotenv;

import java.sql.*;

public class App {

    private final Connection conn;

    public App() throws ClassNotFoundException, SQLException {
        this.conn = createConnection();
    }

    public void createTable() throws SQLException {

        String sql = """
                CREATE TABLE IF NOT EXISTS user (
                      user_id varchar(10)
                    , first_name varchar(50)
                    , last_name varchar(50)
                    , age int(10)
                    , CONSTRAINT pk_user PRIMARY KEY (user_id)
                )
                """;

        System.out.printf("sql: %s%n", sql);
        Statement stmt = conn.createStatement();
        stmt.execute(sql);

        System.out.println("user table was created.");

        stmt.close();
    }

    public void dropTable() throws SQLException {

        String sql = "DROP TABLE user";

        System.out.printf("sql: %s%n", sql);

        Statement stmt = conn.createStatement();
        stmt.execute(sql);

        System.out.println("user table was droped.");

        stmt.close();
    }

    public void createData() throws SQLException {

        String sql = """
                INSERT INTO user (
                      user_id
                    , first_name
                    , last_name
                    , age
                ) VALUES (
                      ?
                    , ?
                    , ?
                    , ?
                )
                """;

        System.out.printf("sql: %s%n", sql);

        conn.setAutoCommit(false);

        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, "p00000001");
            pstmt.setString(2, "길동");
            pstmt.setString(3, "홍");
            pstmt.setInt(4, 20);
            int cnt = pstmt.executeUpdate();
            System.out.printf("cnt: %d%n", cnt);

            pstmt.clearParameters();
            pstmt.setString(1, "p00000002");
            pstmt.setString(2, "영희");
            pstmt.setString(3, "노");
            pstmt.setInt(4, 25);
            cnt = pstmt.executeUpdate();
            System.out.printf("cnt: %d%n", cnt);

            conn.commit();

        } finally {
            conn.rollback();
            conn.setAutoCommit(true);
        }
    }

    public void readData() throws SQLException {
        String sql = """
                select
                      user_id
                    , first_name
                    , last_name
                    , age
                from
                      user
                """;
        System.out.printf("sql: %s%n", sql);

        Statement stmt = conn.createStatement();
        ResultSet reset = stmt.executeQuery(sql);
        if (reset != null) {
            while (reset.next()) {
                String userId = reset.getString("user_id");
                System.out.printf("userId : %s%n", userId);
                String firstName = reset.getString("first_name");
                System.out.printf("firstName : %s%n", firstName);
                String lastName = reset.getString("last_name");
                System.out.printf("lastName : %s%n", lastName);
                int age = reset.getInt("age");
                System.out.printf("age : %d%n", age);
            }
        }

        if (reset != null) reset.close();
        stmt.close();
    }

    public void updateData() throws SQLException {
        String sql = """
                update
                       user
                   set
                       age = ?
                 where
                       last_name = ?
                """;
        System.out.printf("sql: %s%n", sql);

        conn.setAutoCommit(false);

        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, 50);
            pstmt.setString(2, "청");
            int cnt = pstmt.executeUpdate();

            conn.commit();

            System.out.printf("cnt: %d%n", cnt);
        } finally {
            conn.rollback();
            conn.setAutoCommit(false);
        }
    }

    public void deleteData() throws SQLException {
        String sql = "DELETE FROM user";
        System.out.printf("sql: %s%n", sql);

        conn.setAutoCommit(false);

        try (Statement stmt = conn.createStatement()) {
            int cnt = stmt.executeUpdate(sql);

            conn.commit();

            System.out.printf("cnt: %d%n", cnt);
        } finally {
            conn.rollback();
            conn.setAutoCommit(true);
        }
    }

    private Connection createConnection() throws ClassNotFoundException, SQLException {

        Dotenv dotenv = Dotenv.configure()
                .directory("../../")
                .ignoreIfMalformed()
                .ignoreIfMissing()
                .load();

        String className = dotenv.get("JDBC_CLASS_NAME");
        System.out.printf("className: %s%n", className);
        String url = dotenv.get("JDBC_URL");
        System.out.printf("url: %s%n", url);
        String username = dotenv.get("DB_USERNAME");
        System.out.printf("username: %s%n", username);
        String password = dotenv.get("DB_PASSWORD");
        System.out.printf("password: %s%n", password);

        Class.forName(className);
        return DriverManager.getConnection(url);
    }

    public static void main(String[] args) throws SQLException, ClassNotFoundException {
        App app = new App();

        app.createTable();
        app.readData();

        app.deleteData();
        app.readData();

        app.createData();
        app.readData();

        app.updateData();
        app.readData();

        app.deleteData();
        app.readData();

        app.dropTable();
    }
}
